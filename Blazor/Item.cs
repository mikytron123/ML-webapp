/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;


[DataContract(Name = "Item")]
public partial class Item : IValidatableObject
{
    /// <summary>
    /// Defines Age
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum AgeEnum
    {
        /// <summary>
        /// Enum _0 for value: 0
        /// </summary>
        [EnumMember(Value = "0")]
        _0 = 1,

        /// <summary>
        /// Enum _1 for value: 1
        /// </summary>
        [EnumMember(Value = "1")]
        _1 = 2,

        /// <summary>
        /// Enum _2 for value: 2
        /// </summary>
        [EnumMember(Value = "2")]
        _2 = 3,

        /// <summary>
        /// Enum _3 for value: 3
        /// </summary>
        [EnumMember(Value = "3")]
        _3 = 4,

        /// <summary>
        /// Enum _4 for value: 4
        /// </summary>
        [EnumMember(Value = "4")]
        _4 = 5
    }


    /// <summary>
    /// Gets or Sets Age
    /// </summary>
    [DataMember(Name = "age", IsRequired = true, EmitDefaultValue = true)]
    public AgeEnum Age { get; set; }
    /// <summary>
    /// Defines Workclass
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum WorkclassEnum
    {
        /// <summary>
        /// Enum StateGov for value: State-gov
        /// </summary>
        [EnumMember(Value = "State-gov")]
        StateGov = 1,

        /// <summary>
        /// Enum SelfEmpNotInc for value: Self-emp-not-inc
        /// </summary>
        [EnumMember(Value = "Self-emp-not-inc")]
        SelfEmpNotInc = 2,

        /// <summary>
        /// Enum Private for value: Private
        /// </summary>
        [EnumMember(Value = "Private")]
        Private = 3,

        /// <summary>
        /// Enum FederalGov for value: Federal-gov
        /// </summary>
        [EnumMember(Value = "Federal-gov")]
        FederalGov = 4,

        /// <summary>
        /// Enum LocalGov for value: Local-gov
        /// </summary>
        [EnumMember(Value = "Local-gov")]
        LocalGov = 5,

        /// <summary>
        /// Enum SelfEmpInc for value: Self-emp-inc
        /// </summary>
        [EnumMember(Value = "Self-emp-inc")]
        SelfEmpInc = 6,

        /// <summary>
        /// Enum WithoutPay for value: Without-pay
        /// </summary>
        [EnumMember(Value = "Without-pay")]
        WithoutPay = 7
    }


    /// <summary>
    /// Gets or Sets Workclass
    /// </summary>
    [DataMember(Name = "workclass", IsRequired = true, EmitDefaultValue = true)]
    public WorkclassEnum Workclass { get; set; }
    /// <summary>
    /// Defines Education
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum EducationEnum
    {
        /// <summary>
        /// Enum Bachelors for value: Bachelors
        /// </summary>
        [EnumMember(Value = "Bachelors")]
        Bachelors = 1,

        /// <summary>
        /// Enum HSGrad for value: HS-grad
        /// </summary>
        [EnumMember(Value = "HS-grad")]
        HSGrad = 2,

        /// <summary>
        /// Enum _11th for value: 11th
        /// </summary>
        [EnumMember(Value = "11th")]
        _11th = 3,

        /// <summary>
        /// Enum Masters for value: Masters
        /// </summary>
        [EnumMember(Value = "Masters")]
        Masters = 4,

        /// <summary>
        /// Enum _9th for value: 9th
        /// </summary>
        [EnumMember(Value = "9th")]
        _9th = 5,

        /// <summary>
        /// Enum SomeCollege for value: Some-college
        /// </summary>
        [EnumMember(Value = "Some-college")]
        SomeCollege = 6,

        /// <summary>
        /// Enum AssocAcdm for value: Assoc-acdm
        /// </summary>
        [EnumMember(Value = "Assoc-acdm")]
        AssocAcdm = 7,

        /// <summary>
        /// Enum AssocVoc for value: Assoc-voc
        /// </summary>
        [EnumMember(Value = "Assoc-voc")]
        AssocVoc = 8,

        /// <summary>
        /// Enum _7th8th for value: 7th-8th
        /// </summary>
        [EnumMember(Value = "7th-8th")]
        _7th8th = 9,

        /// <summary>
        /// Enum Doctorate for value: Doctorate
        /// </summary>
        [EnumMember(Value = "Doctorate")]
        Doctorate = 10,

        /// <summary>
        /// Enum ProfSchool for value: Prof-school
        /// </summary>
        [EnumMember(Value = "Prof-school")]
        ProfSchool = 11,

        /// <summary>
        /// Enum _5th6th for value: 5th-6th
        /// </summary>
        [EnumMember(Value = "5th-6th")]
        _5th6th = 12,

        /// <summary>
        /// Enum _10th for value: 10th
        /// </summary>
        [EnumMember(Value = "10th")]
        _10th = 13,

        /// <summary>
        /// Enum Preschool for value: Preschool
        /// </summary>
        [EnumMember(Value = "Preschool")]
        Preschool = 14,

        /// <summary>
        /// Enum _12th for value: 12th
        /// </summary>
        [EnumMember(Value = "12th")]
        _12th = 15,

        /// <summary>
        /// Enum _1st4th for value: 1st-4th
        /// </summary>
        [EnumMember(Value = "1st-4th")]
        _1st4th = 16
    }


    /// <summary>
    /// Gets or Sets Education
    /// </summary>
    [DataMember(Name = "education", IsRequired = true, EmitDefaultValue = true)]
    public EducationEnum Education { get; set; }
    /// <summary>
    /// Defines MaritalStatus
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum MaritalStatusEnum
    {
        /// <summary>
        /// Enum NeverMarried for value: Never-married
        /// </summary>
        [EnumMember(Value = "Never-married")]
        NeverMarried = 1,

        /// <summary>
        /// Enum MarriedCivSpouse for value: Married-civ-spouse
        /// </summary>
        [EnumMember(Value = "Married-civ-spouse")]
        MarriedCivSpouse = 2,

        /// <summary>
        /// Enum Divorced for value: Divorced
        /// </summary>
        [EnumMember(Value = "Divorced")]
        Divorced = 3,

        /// <summary>
        /// Enum MarriedSpouseAbsent for value: Married-spouse-absent
        /// </summary>
        [EnumMember(Value = "Married-spouse-absent")]
        MarriedSpouseAbsent = 4,

        /// <summary>
        /// Enum Separated for value: Separated
        /// </summary>
        [EnumMember(Value = "Separated")]
        Separated = 5,

        /// <summary>
        /// Enum MarriedAFSpouse for value: Married-AF-spouse
        /// </summary>
        [EnumMember(Value = "Married-AF-spouse")]
        MarriedAFSpouse = 6,

        /// <summary>
        /// Enum Widowed for value: Widowed
        /// </summary>
        [EnumMember(Value = "Widowed")]
        Widowed = 7
    }


    /// <summary>
    /// Gets or Sets MaritalStatus
    /// </summary>
    [DataMember(Name = "marital-status", IsRequired = true, EmitDefaultValue = true)]
    public MaritalStatusEnum MaritalStatus { get; set; }
    /// <summary>
    /// Defines Occupation
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum OccupationEnum
    {
        /// <summary>
        /// Enum AdmClerical for value: Adm-clerical
        /// </summary>
        [EnumMember(Value = "Adm-clerical")]
        AdmClerical = 1,

        /// <summary>
        /// Enum ExecManagerial for value: Exec-managerial
        /// </summary>
        [EnumMember(Value = "Exec-managerial")]
        ExecManagerial = 2,

        /// <summary>
        /// Enum HandlersCleaners for value: Handlers-cleaners
        /// </summary>
        [EnumMember(Value = "Handlers-cleaners")]
        HandlersCleaners = 3,

        /// <summary>
        /// Enum ProfSpecialty for value: Prof-specialty
        /// </summary>
        [EnumMember(Value = "Prof-specialty")]
        ProfSpecialty = 4,

        /// <summary>
        /// Enum OtherService for value: Other-service
        /// </summary>
        [EnumMember(Value = "Other-service")]
        OtherService = 5,

        /// <summary>
        /// Enum Sales for value: Sales
        /// </summary>
        [EnumMember(Value = "Sales")]
        Sales = 6,

        /// <summary>
        /// Enum CraftRepair for value: Craft-repair
        /// </summary>
        [EnumMember(Value = "Craft-repair")]
        CraftRepair = 7,

        /// <summary>
        /// Enum TransportMoving for value: Transport-moving
        /// </summary>
        [EnumMember(Value = "Transport-moving")]
        TransportMoving = 8,

        /// <summary>
        /// Enum FarmingFishing for value: Farming-fishing
        /// </summary>
        [EnumMember(Value = "Farming-fishing")]
        FarmingFishing = 9,

        /// <summary>
        /// Enum MachineOpInspct for value: Machine-op-inspct
        /// </summary>
        [EnumMember(Value = "Machine-op-inspct")]
        MachineOpInspct = 10,

        /// <summary>
        /// Enum TechSupport for value: Tech-support
        /// </summary>
        [EnumMember(Value = "Tech-support")]
        TechSupport = 11,

        /// <summary>
        /// Enum ProtectiveServ for value: Protective-serv
        /// </summary>
        [EnumMember(Value = "Protective-serv")]
        ProtectiveServ = 12,

        /// <summary>
        /// Enum ArmedForces for value: Armed-Forces
        /// </summary>
        [EnumMember(Value = "Armed-Forces")]
        ArmedForces = 13,

        /// <summary>
        /// Enum PrivHouseServ for value: Priv-house-serv
        /// </summary>
        [EnumMember(Value = "Priv-house-serv")]
        PrivHouseServ = 14
    }


    /// <summary>
    /// Gets or Sets Occupation
    /// </summary>
    [DataMember(Name = "occupation", IsRequired = true, EmitDefaultValue = true)]
    public OccupationEnum Occupation { get; set; }
    /// <summary>
    /// Defines Relationship
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum RelationshipEnum
    {
        /// <summary>
        /// Enum NotInFamily for value: Not-in-family
        /// </summary>
        [EnumMember(Value = "Not-in-family")]
        NotInFamily = 1,

        /// <summary>
        /// Enum Husband for value: Husband
        /// </summary>
        [EnumMember(Value = "Husband")]
        Husband = 2,

        /// <summary>
        /// Enum Wife for value: Wife
        /// </summary>
        [EnumMember(Value = "Wife")]
        Wife = 3,

        /// <summary>
        /// Enum OwnChild for value: Own-child
        /// </summary>
        [EnumMember(Value = "Own-child")]
        OwnChild = 4,

        /// <summary>
        /// Enum Unmarried for value: Unmarried
        /// </summary>
        [EnumMember(Value = "Unmarried")]
        Unmarried = 5,

        /// <summary>
        /// Enum OtherRelative for value: Other-relative
        /// </summary>
        [EnumMember(Value = "Other-relative")]
        OtherRelative = 6
    }


    /// <summary>
    /// Gets or Sets Relationship
    /// </summary>
    [DataMember(Name = "relationship", IsRequired = true, EmitDefaultValue = true)]
    public RelationshipEnum Relationship { get; set; }
    /// <summary>
    /// Defines Race
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum RaceEnum
    {
        /// <summary>
        /// Enum White for value: White
        /// </summary>
        [EnumMember(Value = "White")]
        White = 1,

        /// <summary>
        /// Enum Black for value: Black
        /// </summary>
        [EnumMember(Value = "Black")]
        Black = 2,

        /// <summary>
        /// Enum AsianPacIslander for value: Asian-Pac-Islander
        /// </summary>
        [EnumMember(Value = "Asian-Pac-Islander")]
        AsianPacIslander = 3,

        /// <summary>
        /// Enum AmerIndianEskimo for value: Amer-Indian-Eskimo
        /// </summary>
        [EnumMember(Value = "Amer-Indian-Eskimo")]
        AmerIndianEskimo = 4,

        /// <summary>
        /// Enum Other for value: Other
        /// </summary>
        [EnumMember(Value = "Other")]
        Other = 5
    }


    /// <summary>
    /// Gets or Sets Race
    /// </summary>
    [DataMember(Name = "race", IsRequired = true, EmitDefaultValue = true)]
    public RaceEnum Race { get; set; }
    /// <summary>
    /// Defines Sex
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum SexEnum
    {
        /// <summary>
        /// Enum Male for value: Male
        /// </summary>
        [EnumMember(Value = "Male")]
        Male = 1,

        /// <summary>
        /// Enum Female for value: Female
        /// </summary>
        [EnumMember(Value = "Female")]
        Female = 2
    }


    /// <summary>
    /// Gets or Sets Sex
    /// </summary>
    [DataMember(Name = "sex", IsRequired = true, EmitDefaultValue = true)]
    public SexEnum Sex { get; set; }
    /// <summary>
    /// Defines Capitalgain
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum CapitalgainEnum
    {
        /// <summary>
        /// Enum _0 for value: 0
        /// </summary>
        [EnumMember(Value = "0")]
        _0 = 1,

        /// <summary>
        /// Enum _1 for value: 1
        /// </summary>
        [EnumMember(Value = "1")]
        _1 = 2,

        /// <summary>
        /// Enum _2 for value: 2
        /// </summary>
        [EnumMember(Value = "2")]
        _2 = 3,

        /// <summary>
        /// Enum _3 for value: 3
        /// </summary>
        [EnumMember(Value = "3")]
        _3 = 4,

        /// <summary>
        /// Enum _4 for value: 4
        /// </summary>
        [EnumMember(Value = "4")]
        _4 = 5
    }


    /// <summary>
    /// Gets or Sets Capitalgain
    /// </summary>
    [DataMember(Name = "capitalgain", IsRequired = true, EmitDefaultValue = true)]
    public CapitalgainEnum Capitalgain { get; set; }
    /// <summary>
    /// Defines Capitalloss
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum CapitallossEnum
    {
        /// <summary>
        /// Enum _0 for value: 0
        /// </summary>
        [EnumMember(Value = "0")]
        _0 = 1,

        /// <summary>
        /// Enum _1 for value: 1
        /// </summary>
        [EnumMember(Value = "1")]
        _1 = 2,

        /// <summary>
        /// Enum _2 for value: 2
        /// </summary>
        [EnumMember(Value = "2")]
        _2 = 3,

        /// <summary>
        /// Enum _3 for value: 3
        /// </summary>
        [EnumMember(Value = "3")]
        _3 = 4,

        /// <summary>
        /// Enum _4 for value: 4
        /// </summary>
        [EnumMember(Value = "4")]
        _4 = 5
    }


    /// <summary>
    /// Gets or Sets Capitalloss
    /// </summary>
    [DataMember(Name = "capitalloss", IsRequired = true, EmitDefaultValue = true)]
    public CapitallossEnum Capitalloss { get; set; }
    /// <summary>
    /// Defines Hoursperweek
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum HoursperweekEnum
    {
        /// <summary>
        /// Enum _0 for value: 0
        /// </summary>
        [EnumMember(Value = "0")]
        _0 = 1,

        /// <summary>
        /// Enum _1 for value: 1
        /// </summary>
        [EnumMember(Value = "1")]
        _1 = 2,

        /// <summary>
        /// Enum _2 for value: 2
        /// </summary>
        [EnumMember(Value = "2")]
        _2 = 3,

        /// <summary>
        /// Enum _3 for value: 3
        /// </summary>
        [EnumMember(Value = "3")]
        _3 = 4,

        /// <summary>
        /// Enum _4 for value: 4
        /// </summary>
        [EnumMember(Value = "4")]
        _4 = 5
    }


    /// <summary>
    /// Gets or Sets Hoursperweek
    /// </summary>
    [DataMember(Name = "hoursperweek", IsRequired = true, EmitDefaultValue = true)]
    public HoursperweekEnum Hoursperweek { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="Item" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected Item() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="Item" /> class.
    /// </summary>
    /// <param name="age">age (required).</param>
    /// <param name="workclass">workclass (required).</param>
    /// <param name="fnlwgt">fnlwgt (required).</param>
    /// <param name="education">education (required).</param>
    /// <param name="maritalStatus">maritalStatus (required).</param>
    /// <param name="occupation">occupation (required).</param>
    /// <param name="relationship">relationship (required).</param>
    /// <param name="race">race (required).</param>
    /// <param name="sex">sex (required).</param>
    /// <param name="capitalgain">capitalgain (required).</param>
    /// <param name="capitalloss">capitalloss (required).</param>
    /// <param name="hoursperweek">hoursperweek (required).</param>
    public Item(AgeEnum age = default(AgeEnum), WorkclassEnum workclass = default(WorkclassEnum), decimal fnlwgt = default(decimal), EducationEnum education = default(EducationEnum), MaritalStatusEnum maritalStatus = default(MaritalStatusEnum), OccupationEnum occupation = default(OccupationEnum), RelationshipEnum relationship = default(RelationshipEnum), RaceEnum race = default(RaceEnum), SexEnum sex = default(SexEnum), CapitalgainEnum capitalgain = default(CapitalgainEnum), CapitallossEnum capitalloss = default(CapitallossEnum), HoursperweekEnum hoursperweek = default(HoursperweekEnum))
    {
        this.Age = age;
        this.Workclass = workclass;
        this.Fnlwgt = fnlwgt;
        this.Education = education;
        this.MaritalStatus = maritalStatus;
        this.Occupation = occupation;
        this.Relationship = relationship;
        this.Race = race;
        this.Sex = sex;
        this.Capitalgain = capitalgain;
        this.Capitalloss = capitalloss;
        this.Hoursperweek = hoursperweek;
    }

    /// <summary>
    /// Gets or Sets Fnlwgt
    /// </summary>
    [DataMember(Name = "fnlwgt", IsRequired = true, EmitDefaultValue = true)]
    public decimal Fnlwgt { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("class Item {\n");
        sb.Append("  Age: ").Append(Age).Append("\n");
        sb.Append("  Workclass: ").Append(Workclass).Append("\n");
        sb.Append("  Fnlwgt: ").Append(Fnlwgt).Append("\n");
        sb.Append("  Education: ").Append(Education).Append("\n");
        sb.Append("  MaritalStatus: ").Append(MaritalStatus).Append("\n");
        sb.Append("  Occupation: ").Append(Occupation).Append("\n");
        sb.Append("  Relationship: ").Append(Relationship).Append("\n");
        sb.Append("  Race: ").Append(Race).Append("\n");
        sb.Append("  Sex: ").Append(Sex).Append("\n");
        sb.Append("  Capitalgain: ").Append(Capitalgain).Append("\n");
        sb.Append("  Capitalloss: ").Append(Capitalloss).Append("\n");
        sb.Append("  Hoursperweek: ").Append(Hoursperweek).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        // Fnlwgt (decimal) maximum
        if (this.Fnlwgt > (decimal)1490400.0)
        {
            yield return new ValidationResult("Invalid value for Fnlwgt, must be a value less than or equal to 1490400.0.", new[] { "Fnlwgt" });
        }

        // Fnlwgt (decimal) minimum
        if (this.Fnlwgt < (decimal)13492.0)
        {
            yield return new ValidationResult("Invalid value for Fnlwgt, must be a value greater than or equal to 13492.0.", new[] { "Fnlwgt" });
        }

        yield break;
    }
}


