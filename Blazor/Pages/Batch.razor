@page "/batch"
@using Microsoft.Extensions.Logging
@using Newtonsoft.Json
@using System.Text
@using System;
@using System.Threading.Tasks
@inject HttpClient Http
@inject ILogger<Batch> Logger


<PageTitle>Batch Prediction</PageTitle>

<h1>Batch Prediction</h1>
<div>
    <span>Please upload a csv for batch prediction</span>
</div>

<div>
    <FluentInputFile DragDropZoneVisible=true OnInputFileChange="@LoadFiles" accept="text/*" id="inputfile" aria-label="Upload File">
    <FluentButton Id="UploadButton" Appearance="Appearance.Accent">
    Upload files
    </FluentButton>
    </FluentInputFile>

</div>

@if (loaded)
{
    <div class="predtable">
    <FluentDataGrid Items="@predsclass">
        <PropertyColumn Property="@(p => p.Age)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Workclass)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Fnlwgt)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Education)" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="@(p => p.MaritalStatus)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Occupation)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Relationship)" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="@(p => p.Race)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Sex)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Capitalgain)" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="@(p => p.Capitalloss)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Hoursperweek)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Prediction)" Sortable="true"></PropertyColumn>
        
    </FluentDataGrid>
</div>
}

@code {
    bool loaded = false;
    IQueryable<BatchPrediction> predsclass = new List<BatchPrediction>().AsQueryable();

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {

        var file = e.File;
        var filename = e.File.Name;
        var ms = new MemoryStream();
        using (var stream = file.OpenReadStream())
        {
            using (var formData = new MultipartFormDataContent())
            {
                await stream.CopyToAsync(ms);
                ms.Position = 0;
                var barray = new ByteArrayContent(ms.ToArray());
                formData.Add(barray, "file", filename);
                var req = await Http.PostAsync("http://localhost:8000/uploadfile", formData);
                var strdata = await req.Content.ReadAsStringAsync();
                predsclass = JsonConvert.DeserializeObject<List<BatchPrediction>>(strdata).AsQueryable() ?? throw new
                NullReferenceException("Api is null");
                loaded = true;
            }
        }

    }

}