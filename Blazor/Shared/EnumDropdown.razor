@using System.Runtime.Serialization
@inject ILogger<EnumDropdown<TEnum>> Logger
@typeparam TEnum where TEnum : System.Enum
<div class="selectdiv">
    <FluentSelect TOption="string" id=@id Label=@($"{id}") Value="_selectedValue" ValueChanged="@((s)=>UpdateOption(s))" Placeholder="Choose Here"
     Required=true> 
        @foreach (var item in Enum.GetValues(typeof(TEnum)))
        {
            <FluentOption Value="@(Enum.GetName(typeof(TEnum),item))">@(Utility.GetEnumMemberAttrValue(typeof(TEnum),item)) </FluentOption>
        }

    </FluentSelect>
</div>
@code {

    [Parameter]
    public string? id { get; set; }
    [Parameter]
    public EventCallback<TEnum> bindvalChanged { get; set; }

    [Parameter]
    public TEnum? Bindval { get; set; }

    string? _selectedValue {get;set;}

    public async Task UpdateOption(string e){
        var res = Enum.Parse(typeof(TEnum),e);
        
        if (res is null){
            return;
        }
        Bindval = (TEnum)res;
        await bindvalChanged.InvokeAsync(Bindval);
    }

    private async Task UpdateVal(TEnum e)
    {
        Bindval=e;
        await bindvalChanged.InvokeAsync(e);
        Bindval = e;
    }
}
