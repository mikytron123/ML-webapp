/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

/// <summary>
/// BatchPrediction
/// </summary>
[DataContract(Name = "BatchPrediction")]
public partial class BatchPrediction : IValidatableObject
{
    /// <summary>
    /// Gets or Sets Age
    /// </summary>
    [DataMember(Name = "age", IsRequired = true, EmitDefaultValue = true)]
    public string Age { get; set; }
    /// <summary>
    /// Gets or Sets Workclass
    /// </summary>
    [DataMember(Name = "workclass", IsRequired = true, EmitDefaultValue = true)]
    public string Workclass { get; set; }
    /// <summary>
    /// Gets or Sets Education
    /// </summary>
    [DataMember(Name = "education", IsRequired = true, EmitDefaultValue = true)]
    public string Education { get; set; }
    /// <summary>
    /// Gets or Sets Occupation
    /// </summary>
    [DataMember(Name = "occupation", IsRequired = true, EmitDefaultValue = true)]
    public string Occupation { get; set; }
    /// <summary>
    /// Gets or Sets Relationship
    /// </summary>
    [DataMember(Name = "relationship", IsRequired = true, EmitDefaultValue = true)]
    public string Relationship { get; set; }
    /// <summary>
    /// Gets or Sets Race
    /// </summary>
    [DataMember(Name = "race", IsRequired = true, EmitDefaultValue = true)]
    public string Race { get; set; }
    /// <summary>
    /// Gets or Sets Sex
    /// </summary>
    [DataMember(Name = "sex", IsRequired = true, EmitDefaultValue = true)]
    public string Sex { get; set; }
    /// <summary>
    /// Gets or Sets Capitalgain
    /// </summary>
    [DataMember(Name = "capitalgain", IsRequired = true, EmitDefaultValue = true)]
    public string Capitalgain { get; set; }
    /// <summary>
    /// Gets or Sets Capitalloss
    /// </summary>
    [DataMember(Name = "capitalloss", IsRequired = true, EmitDefaultValue = true)]
    public string Capitalloss { get; set; }
    /// <summary>
    /// Gets or Sets Hoursperweek
    /// </summary>
    [DataMember(Name = "hoursperweek", IsRequired = true, EmitDefaultValue = true)]
    public string Hoursperweek { get; set; }
    /// <summary>
    /// Gets or Sets MaritalStatus
    /// </summary>
    [DataMember(Name = "marital-status", IsRequired = true, EmitDefaultValue = true)]
    public string MaritalStatus { get; set; }

    /// <summary>
    /// Gets or Sets Prediction
    /// </summary>
    [DataMember(Name = "prediction", IsRequired = true, EmitDefaultValue = true)]
    public string Prediction { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="BatchPrediction" /> class.
    /// </summary>
    /// <summary>
    /// Initializes a new instance of the <see cref="BatchPrediction" /> class.
    /// </summary>
    /// <param name="age">age (required).</param>
    /// <param name="workclass">workclass (required).</param>
    /// <param name="fnlwgt">fnlwgt (required).</param>
    /// <param name="education">education (required).</param>
    /// <param name="maritalStatus">maritalStatus (required).</param>
    /// <param name="occupation">occupation (required).</param>
    /// <param name="relationship">relationship (required).</param>
    /// <param name="race">race (required).</param>
    /// <param name="sex">sex (required).</param>
    /// <param name="capitalgain">capitalgain (required).</param>
    /// <param name="capitalloss">capitalloss (required).</param>
    /// <param name="hoursperweek">hoursperweek (required).</param>
    /// <param name="prediction">prediction (required).</param>
    public BatchPrediction(string age = "", string workclass = "", decimal fnlwgt = default(decimal), string education = "", string maritalStatus = "", string occupation = "", string relationship = "", string race = "", string sex = "", string capitalgain = "", string capitalloss = "", string hoursperweek = "", string prediction = "")
    {
        this.Age = age;
        this.Workclass = workclass;
        this.Fnlwgt = fnlwgt;
        this.Education = education;
        this.MaritalStatus = maritalStatus;
        this.Occupation = occupation;
        this.Relationship = relationship;
        this.Race = race;
        this.Sex = sex;
        this.Capitalgain = capitalgain;
        this.Capitalloss = capitalloss;
        this.Hoursperweek = hoursperweek;
        this.Prediction = prediction;
    }

    /// <summary>
    /// Gets or Sets Fnlwgt
    /// </summary>
    [DataMember(Name = "fnlwgt", IsRequired = true, EmitDefaultValue = true)]
    public decimal Fnlwgt { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("class BatchPrediction {\n");
        sb.Append("  Age: ").Append(Age).Append("\n");
        sb.Append("  Workclass: ").Append(Workclass).Append("\n");
        sb.Append("  Fnlwgt: ").Append(Fnlwgt).Append("\n");
        sb.Append("  Education: ").Append(Education).Append("\n");
        sb.Append("  MaritalStatus: ").Append(MaritalStatus).Append("\n");
        sb.Append("  Occupation: ").Append(Occupation).Append("\n");
        sb.Append("  Relationship: ").Append(Relationship).Append("\n");
        sb.Append("  Race: ").Append(Race).Append("\n");
        sb.Append("  Sex: ").Append(Sex).Append("\n");
        sb.Append("  Capitalgain: ").Append(Capitalgain).Append("\n");
        sb.Append("  Capitalloss: ").Append(Capitalloss).Append("\n");
        sb.Append("  Hoursperweek: ").Append(Hoursperweek).Append("\n");
        sb.Append("  Prediction: ").Append(Prediction).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        // Fnlwgt (decimal) maximum
        if (this.Fnlwgt > (decimal)1490400.0)
        {
            yield return new ValidationResult("Invalid value for Fnlwgt, must be a value less than or equal to 1490400.0.", new[] { "Fnlwgt" });
        }

        // Fnlwgt (decimal) minimum
        if (this.Fnlwgt < (decimal)13492.0)
        {
            yield return new ValidationResult("Invalid value for Fnlwgt, must be a value greater than or equal to 13492.0.", new[] { "Fnlwgt" });
        }

        yield break;
    }
}


